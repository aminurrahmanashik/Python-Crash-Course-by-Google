Week - 3
Practice Quiz: Recursion


***Question 1***
What is recursion used for?

a. Recursion is used to create loops in languages where other loops are not available.
b. We use recursion only to implement mathematical formulas in code.
c. Recursion is used to iterate through sequences of files and directories.
d. Recursion lets us tackle complex problems by reducing the problem to a simpler one.

Solution: d


***Question 2***
Which of these activities are good use cases for recursive programs? Check all that apply.

a. Going through a file system collecting information related to directories and files.
b. Creating a user account.
c. Installing or upgrading software on the computer.
d. Managing permissions assigned to groups inside a company, when each group can contain both subgroups and users.

Solution: a,d

***Question 3***
Fill in the blanks to make the is_power_of function return whether the number is a power of the given base. 
Note: base is assumed to be a positive number. 
Tip: for functions that return a boolean value, you can return the result of a comparison.

Solution: 
def is_power_of(number, base):
  # Base case: when number is smaller than base.

  if number == 1:
    # If number is equal to 1, it's a power (base**0).
    return True
  elif number < base:
      return False

  # Recursive case: keep dividing number by base.
  return is_power_of(number/base, base)

print(is_power_of(8 ,2)) # Should be True
print(is_power_of(64 ,4)) # Should be True
print(is_power_of(70 ,10)) # Should be False


***Question 4***
The count_users function recursively counts the amount of users that belong to a group in the company system, 
by going through each of the members of a group and if one of them is a group, 
recursively calling the function and counting the members. But it has a bug! Can you spot the problem and fix it?

Solution: 
def count_users(group):
  count = 0
  for member in get_members(group):
    #count += 1
    if is_group(member):
      count += count_users(member)
    else:
      count += 1
  return count

print(count_users("sales")) # Should be 3
print(count_users("engineering")) # Should be 8
print(count_users("everyone")) # Should be 18



***Question 5***
Implement the sum_positive_numbers function, as a recursive function that returns the sum of all positive numbers 
between the number n received and 1. 
For example, when n is 3 it should return 1+2+3=6, and when n is 5 it should return 1+2+3+4+5=15

Solution: 
def sum_positive_numbers(n):
    # The base case is n being smaller than 1
    if n < 1:
        return 0

    # The recursive case is adding this number to 
    # the sum of the numbers smaller than this one.
    return n + sum_positive_numbers(n-1)

print(sum_positive_numbers(3)) # Should be 6
print(sum_positive_numbers(5)) # Should be 15

